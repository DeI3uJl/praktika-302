+ visual studio code
+ node js и npm
+ postman
сделал папку praktika и в ней 2 папки ахахахахахахах клиент и сервер 

---далее в visual studio code---
на сервере создаем файл index.js 
переходим в cd server и миниацелезируем проект node js командой    npm init -y    получился package.json где храниться вся инфа о проекте

добавляем 3 node модуля(пакета) командой: npm install express(web framework for node.js кторый помогает в разработке web приложений)
cors(механизм исп доп http запросы заголловки, можете оганичить запросы юзеров, админа от обычного))
cookie-parser(промежуточное по которое помогает получить данные из куки)

использовали команду npm i nodemon(утилита котороая помогает в перезапуске приложения после изменения, тип тебе не надо будет ручками перезапускать самому)
--save-dev(только для developera)

все устновление пакеты можно проверить в package.json в категории dependencies

в package.json в разделе scripts изменили test на "dev": "nodemon index.js"

в index.js пишем: const express = require('express');
const = тип данных(не изменияемые)
express = наименование
require = тип импоритровать
в () = импортировали библиотеку express
 
 тоже самое делаем c cors и cookieParser

 скачиваем npm i env
 на сервере создаем файл .env(это конфигурационный файл, конфиг проекта)
пишем там порт который будут слушать: PORT = 7000

в index.js сверху добавляем:
require('.env').config();
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');

const PORT = process.env.PORT || 5000;                           
const app = express();                                       объявление конструктора для экспресса
const start = async () => {                                  асинхронная(в один промежуток несколько пользоателей могут испольовать одновременно) функиция старт
    try {                                                    попытаться послушать порт
        app.listen(PORT, () =>                                   
            console.log(`server started on port = ${PORT}`))     
    }                                                            
    catch (e) {                                              если есть, отловит ошибку в коде и покажет в консоль
        console.log(e)                                           
    }
}

start()

не забываем переходить в сервер с помощью cd server

для запуска нужно прописать: npm run dev 
нам выдаст: server started on port = 7000
в браузере пишем localhost:7000
получим: cannnot get

создали 2 папки controllers и router 
в controllers создали файл user_controller.js и вписали туда:
class UserController {
    async GetUser(req, res, next)
    {
        try {
            res.json("WORKED")
        } catch(e) {}
    }
}

module.exports = new UserController();

в router файл index.js в котором:
const Router = require("express").Router;
const router = Router();

const users = require("../controllers/user_controller");
router.get("/users", users.GetUser );
router.post("/adduser");
router.delete("/deluser");
router.post("/upduser");

module.exports = router;


инзменяем главный index.js на:
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const cookieParser = require('cookie-parser');

const port = process.env.PORT || 5000;
const app = express();
const router = require("./router/index")

app.use(express.json());
app.use(cookieParser());
app.use(cors());
app.use("/api", router);

const start = async() => {
    try {
        app.listen(port, () => {
            console.log("server started at port " + port)
        })
    }catch (e) {
        console.log(e)
    }
}

start();




выполняем команду в папке сервер: 
качаем призму npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
в файле .env DATABASE_URL изминяем на: DATABASE_URL="postgresql://test:password@postgres.vm:5432/MaximAntoshin?schema=public"
вместо mydb свое фи на англ

в папке prisma в файле schema.prisma создаем моделли данных для пользователей и переферии:
model User {
  id String @id @default(uuid())
  firstName String 
  lastName String
  email String
  numberPhone String
  position String
  jobPlace String
  aboutPC PC[]
}

model PC {
  id String @id @default(uuid())
  motherboard String
  processor String
  videocard String
  RAM String
  keyboard String
  monitor String
  user User @relation(fields:[userid], references: [id])
  userid String
}

мигрируем это все с помощью команды: npx prisma migrate dev --name init




000000000000000000user service старый:
const prisma = new PrismaClient()
class UserService {
  async createUser(req, res, next)
  {
      try {
          const user = await prisma.user.create({
            data:{
              id: "e20a434e-f3e4-11ed-a05b-0242ac120003", 
              firstName: "kirill", 
              lastName: "cursed",
              email: "qwerty@mail.ru",
              numberPhone: "7921 1488 69 24",
              position: "228",
              jobPlace: "kick.com",
            }
          })
      } catch(e) {}
  }
}
module.exports = new UserService(); 
000000000000000000

000000000000000000user controllers старый
module.exports = new UserController();
class UserController {    
    async CreateUser(req, res, next)
    {
        try {
            const user = await prisma.user.create({
                data:{
                  id: "e20a434e-f3e4-11ed-a05b-0242ac120003", 
                  firstName: "kirill", 
                  lastName: "cursed",
                  email: "qwerty@mail.ru",
                  numberPhone: "7921 1488 69 24",
                  position: "228",
                  jobPlace: "kick.com",
                }
              })
        } catch(e) {console.log(e)}
    }
}
module.exports = new UserController();
000000000000000000



00000000000000
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

class UserService {
    
    async GetAllUser(require) {
        return Prisma_client.user.findMany({});
    }

    async CreateUser(req) {
        const { firstName, lastName, email, numberPhone, position, jobPlace } = req.body
        
        try {
            const user = await prisma.user.create({
                data: {
                    firstName,
                    lastName,
                    email,
                    numberPhone,
                    position,
                    jobPlace,
                    aboutPC: {}
                }
            })
            return user
        } catch (e) {
            return e
        }

    }
    async DelUser(require) {
        return PrismaClient.user.DelUser({});
    }
    async UpUser(require) {
        return PrismaClient.user.UpUser({});
    }
}

module.exports = new UserService;
000000000000000


00000000000000000 conthrollers
const { response } = require('express');
const userService = require('../services/user_service')

class UserController {
    async GetUser(req, res, next) {
        try {
            res.json(await userService.getallusers())
        } catch (e) {
            res.json({ "error": "EXCEPTION" })
        }
    }

    async AddUser(req, res, next) {
        try {
            res.json(await userService.CreateUser(req))
        } catch (e) {
            console.log(e)
        }
    }
    async DelUser(req, res, next) {
        try {
            res.json(await userService.deleteUsers())
        } catch (e) {
            res.json({ "error": "EXCEPTION" })
        }
    }
    async UpUser(req, res, next) {
        const { email, age } = changes
        try {
            const user = await prisma.user.update({
                where: {
                    id
                },
                data: {
                    email,
                    profile: {
                        update: {
                            age
                        }
                    }
                },
                select: {
                    email: true
                },
                include: {
                    profile: true
                }
            })
            return user
        } catch (e) {
            res.json(await userService.update(req))

            res.json({ "error": "EXCEPTION" })
        }
    }
}

module.exports = new UserController()
00000000000000000000

{
"firstName" : "kirill",
"lastName" : "bledniy",
"email" : "asdasd@mail.ru",
"numberPhone" : "79211243124235",
"position" : "main guitar",
"jobPlace" : "poshlaya molli"
}
00000
{
"id" : "1bdb65ff-a958-4d3a-9820-06c660118984",
"key" : "numberPhone",
"val" : "1232353353"
}

